---
title: "Community Contribution"
format: html
editor: visual
author: Shaifali Choudhary (sc5609)
---

## Dimensionality Reduction and Visualization with t-SNE in R

#### What is t-SNE

t-SNE (t-Distributed Stochastic Neighbor Embedding)

- t-SNE is a non-linear dimensionality reduction technique.
- It is particularly well-suited for embedding high-dimensional data into a low-dimensional space for visualization.


#### Setting Up t-SNE and loading the packages

```{r}
library(Rtsne)
library(ggplot2)
library(dplyr)
library(gridExtra)
```

```{r}
data(iris)
```

#### Exploring the Data

```{r}
# Display the first few rows of the dataset
head(iris)

# Summary statistics
summary(iris)

# Pair plot to visualize relationships between variables
pairs(iris[, -5], col = iris$Species)
```

#### Preparing the Data

```{r}
# Remove the labels
iris_data <- iris[, -5]

# Scale the features
iris_data <- scale(iris_data)

# Remove duplicate rows
iris_data <- iris_data[!duplicated(iris_data), ]
```

#### Running the t-SNE Algorithm

```{r}
# Set a seed for reproducibility
set.seed(123)

# Run t-SNE
tsne_result <- Rtsne(iris_data, dims = 2, perplexity = 30, verbose = TRUE, max_iter = 500)
```

#### Tuning t-SNE Parameters

```{r}
# Run t-SNE with different perplexity values
tsne_result_10 <- Rtsne(iris_data, dims = 2, perplexity = 10, verbose = TRUE, max_iter = 500)
tsne_result_20 <- Rtsne(iris_data, dims = 2, perplexity = 20, verbose = TRUE, max_iter = 500)

# Create dataframes with the t-SNE results
tsne_data_10 <- data.frame(tsne_result_10$Y, Species = iris$Species[!duplicated(iris[, -5])])
tsne_data_20 <- data.frame(tsne_result_20$Y, Species = iris$Species[!duplicated(iris[, -5])])
colnames(tsne_data_10) <- colnames(tsne_data_20) <- c("Dim1", "Dim2", "Species")

# Plot the results
p1 <- ggplot(tsne_data_10, aes(x = Dim1, y = Dim2, color = Species)) +
  geom_point(size = 2) +
  labs(title = 't-SNE with Perplexity 10', x = 'Dimension 1', y = 'Dimension 2') +
  theme_minimal()

p2 <- ggplot(tsne_data_20, aes(x = Dim1, y = Dim2, color = Species)) +
  geom_point(size = 2) +
  labs(title = 't-SNE with Perplexity 20', x = 'Dimension 1', y = 'Dimension 2') +
  theme_minimal()

# Display the plots
grid.arrange(p1, p2, ncol = 2)
```

#### Comparing t-SNE with PCA 

```{r}
# Run PCA
pca_result <- prcomp(iris_data)

# Create a dataframe with the PCA results
pca_data <- data.frame(pca_result$x[, 1:2], Species = iris$Species[!duplicated(iris[, -5])])
colnames(pca_data) <- c("PC1", "PC2", "Species")

# Plot the PCA results
ggplot(pca_data, aes(x = PC1, y = PC2, color = Species)) +
  geom_point(size = 2) +
  labs(title = 'PCA of Iris Dataset', x = 'Principal Component 1', y = 'Principal Component 2') +
  theme_minimal()
```

